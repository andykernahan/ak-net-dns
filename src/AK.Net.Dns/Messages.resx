<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InternalError" xml:space="preserve">
    <value>An unexpected internal error occurred: {0}</value>
  </data>
  <data name="MustBeAnIPv4Addr" xml:space="preserve">
    <value>Must be an IPv4 address.</value>
  </data>
  <data name="MustBeAnIPv6Addr" xml:space="preserve">
    <value>Must be an IPv6 address.</value>
  </data>
  <data name="MustBeAValidDnsName" xml:space="preserve">
    <value>'{0}' is not a valid DNS name.</value>
  </data>
  <data name="MustNotBeAnEmptyString" xml:space="preserve">
    <value>Must not be an empty string.</value>
  </data>
  <data name="DnsNameHasTooManyRefs" xml:space="preserve">
    <value>Unble to read the DNS name as the maximum number of references ({0}) has been reached.</value>
  </data>
  <data name="EndOfDnsStreamReached" xml:space="preserve">
    <value>The end of the underlying data stream has been reached before all data needed for the current operation could be read.</value>
  </data>
  <data name="CharStringTooLong" xml:space="preserve">
    <value>The specified &lt;character-string&gt; is too long.</value>
  </data>
  <data name="DnsRecordMustBeAorAaaa" xml:space="preserve">
    <value>Unable to convert the specified record to an IP address as it is not of type A or AAAA.</value>
  </data>
  <data name="InvalidDnsHeaderFormat" xml:space="preserve">
    <value>Unable to decode the DnsHeader from the specified reader as the format of the data is invalid.</value>
  </data>
  <data name="DnsQuestionAlreadyAMember" xml:space="preserve">
    <value>The specified DnsQuestion is already a member of this DnsQuestionCollection.</value>
  </data>
  <data name="DnsQueryExpected" xml:space="preserve">
    <value>Decoder data does not contain a query message.</value>
  </data>
  <data name="InvalidDnsMessageFormat" xml:space="preserve">
    <value>Unable to decode the DnsMessage from the specified reader as the format of the data is invalid.</value>
  </data>
  <data name="InvalidDnsQuestionFormat" xml:space="preserve">
    <value>Unable to decode the DnsQuestion from the specified reader as the format of the data is invalid.</value>
  </data>
  <data name="DnsTransportFailed" xml:space="preserve">
    <value>An error occured during transport: '{0}'</value>
  </data>
  <data name="InvalidAsyncResult" xml:space="preserve">
    <value>The specified async result does not belong to this operation.</value>
  </data>
  <data name="UnableToConcatToAbsoluteDnsName" xml:space="preserve">
    <value>Unable to concatenate an absolute DnsName with another DnsName.</value>
  </data>
  <data name="DnsTransportNoEndPointsReplied" xml:space="preserve">
    <value>Unable to complete the transport operation as no endpoint replied.</value>
  </data>
  <data name="AsyncResultEndAlreadyCalled" xml:space="preserve">
    <value>End has already been called on this operation.</value>
  </data>
  <data name="DnsResolverNegativeResponseCodeReceived" xml:space="preserve">
    <value>Unable to answer query as the server responded with a negative response code.

Question: {0}
Response Code: {1}</value>
  </data>
  <data name="MustBeAnIPAddressOrDnsName" xml:space="preserve">
    <value>Must be an IPAddress of valid DNS name.</value>
  </data>
  <data name="UnsupportedDnsNameLabelType" xml:space="preserve">
    <value>'{0}' is not a supported or recognised DNS label name type.</value>
  </data>
  <data name="MustBeAnIPv4OrIPv6Addr" xml:space="preserve">
    <value>Must be an IPv4 or IPv6 address.</value>
  </data>
  <data name="UnableToMakeRelativeNotASubDomainOfName" xml:space="preserve">
    <value>Unable to make '{0}' relative to '{1}' as '{0}' is not a a sub-domain of '{1}'.</value>
  </data>
  <data name="ConfigurationTypeIsNotAssignableFrom" xml:space="preserve">
    <value>Type {0} is not assignable from {1}.</value>
  </data>
  <data name="DnsReplyExpected" xml:space="preserve">
    <value>Decoder data does not contain a reply message.</value>
  </data>
  <data name="CollectionMustBeReadonly" xml:space="preserve">
    <value>The specified collection must be readonly.</value>
  </data>
  <data name="DnsTransportIncomingMessageToLarge" xml:space="preserve">
    <value>Unable to complete the transport operation as the incoming message size ({0} bytes) exceeds the maximum size as specified in the configuration ({1} bytes).</value>
  </data>
  <data name="DnsTransportReceivedEmptyMessage" xml:space="preserve">
    <value>Unable to complete the transport operation as the incoming message is zero bytes in length.</value>
  </data>
</root>